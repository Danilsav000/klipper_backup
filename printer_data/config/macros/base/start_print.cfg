
[include heatsoak.cfg]


[gcode_macro START_PRINT]
description: Machine heatup procedure before starting a print
variable_bed_temp: 0
variable_extruder_temp: 0
variable_z_adjust: 0
variable_soak: 0
variable_chamber_temp: 0
variable_chamber_maxtime: 0
variable_material: "XXX"
variable_bed_mesh_profile: ""
variable_total_layer: 0

gcode:
    # Get all the parameters passed from the slicer
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_bed_temp)|float %} # Bed temperature
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %} # Extruder temperature
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}  # Optionnal Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    {% set SOAK = params.SOAK|default(printer["gcode_macro _USER_VARIABLES"].print_default_soak)|int %} # Heatsoak time of the bed in minutes
    {% set CHAMBER_TEMP = params.CHAMBER|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_temp)|int %} # Chamber temperature setpoint
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_max_heating_time)|int %} # Chamber heatsoak timeout in minutes
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES"].print_default_material)|string %} # Material type set in the slicer
    {% set BED_MESH_PROFILE = params.MESH|default("")|string %} # Bed mesh profile to load


    # Set the variables to be used in all the modules based on the slicer parameters
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=soak VALUE={SOAK}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_maxtime VALUE={CHAMBER_MAXTIME}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=material VALUE='"{MATERIAL}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_mesh_profile VALUE='"{BED_MESH_PROFILE}"'
    
    {% if params.TOTAL_LAYER %} # total layers count (if provided by the slicer)
        SET_PRINT_STATS_INFO TOTAL_LAYER={params.TOTAL_LAYER|int}
        SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=total_layer VALUE={params.TOTAL_LAYER|int}
    {% endif %}

    # Get all the config options and configurations for this macro
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set light_enabled = printer["gcode_macro _USER_VARIABLES"].caselight_enabled %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set firmware_retraction_enabled = printer["gcode_macro _USER_VARIABLES"].firmware_retraction_enabled %}
    {% set hotend_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].hotend_fan_tach_enabled %}
    {% set scew_profile_enabled = printer["gcode_macro _USER_VARIABLES"].scew_profile_enabled %}
    {% set purging_enabled = printer["gcode_macro _USER_VARIABLES"].purging_enabled %}
    {% set smart_parking_enabled = printer["gcode_macro _USER_VARIABLES"].smart_parking_enabled %}
    {% set safe_extruder_temp = printer["gcode_macro _USER_VARIABLES"].safe_extruder_temp|float %}
    {% set light_intensity_start_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_start_print %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES"].light_intensity_printing %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_toolhead_sensor_enabled %} 
    {% set filament_entry_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_entry_sensor_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}
    {% set auto_power_off_enabled = printer["gcode_macro _USER_VARIABLES"].auto_power_off_enabled %}
    
    {% if auto_power_off_enabled %}
      POWEROFF_CANCEL
    {% endif %}

    {% if light_enabled %}
        CASELIGHT_ON S={light_intensity_printing}
    {% endif %}

    {% if MATERIAL not in printer["gcode_macro _USER_VARIABLES"].material_parameters %}
        RESPOND MSG="Material '{MATERIAL}' is unknown!"
        { action_raise_error("Add this new material to your material_parameters variable!") }
    {% else %}
        RESPOND MSG="Material '{MATERIAL}' is used"
        {% set material = printer["gcode_macro _USER_VARIABLES"].material_parameters[MATERIAL] %}
    {% endif %}


    {% if hotend_fan_tach_enabled %}
        UPDATE_DELAYED_GCODE ID=_BACKGROUND_HOTEND_TACHO_CHECK DURATION=1
    {% endif %}

    # --------------------------------
    # Let's do the START_PRINT actions
    # --------------------------------
    {% if status_leds_enabled %}
        STATUS_BUSY
    {% endif %}


    CLEAR_PAUSE

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    SET_GCODE_OFFSET Z=0
    M221 S100
    M220 S100
    G90
    M83

    # Material parameters
    {% if firmware_retraction_enabled %}
        SET_RETRACTION RETRACT_LENGTH={material.retract_length} RETRACT_SPEED={material.retract_speed} UNRETRACT_EXTRA_LENGTH={material.unretract_extra_length} UNRETRACT_SPEED={material.unretract_speed}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={material.pressure_advance}

    # Homing before START_PRINT movements and actions
    {% if force_homing_in_start_print %}
        G28
    {% else %}
        _CG28
    {% endif %}

    # Here is the core of the START_PRINT were we get the startprint_actions variable
    # to do the procedure in the correct order for the configured probe (or user custom override)
    {% set sp_actions = printer["gcode_macro _USER_VARIABLES"].startprint_actions %}
    {% for action in sp_actions %}
        {% if action == "scew_profile" %}
            _MODULE_LOAD_SCEW_PROFILE
        {% elif action == "extruder_preheating" %}
            _MODULE_EXTRUDER_PREHEATING
        {% elif action == "bed_soak" %}
            _MODULE_HEATSOAK_BED
        {% elif action == "chamber_soak" %}
            _MODULE_HEATSOAK_CHAMBER
        {% elif action == "extruder_heating" %}
            _MODULE_EXTRUDER_HEATING
        {% elif action == "bedmesh" %}
            _MODULE_BED_MESH
        {% elif action == "toolhead_parking" %}
            _MODULE_TOOLHEAD_PARKING
        {% elif action == "purging" %}
            _MODULE_PURGING
            
        {% else %}
            { action_raise_error("Unknown module called in START_PRINT! Please verify your startprint_actions variable override!") }
        {% endif %}
    {% endfor %}

    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1

    # Final material parameters
    SET_GCODE_OFFSET Z_ADJUST={material.additional_z_offset} MOVE=1
    {% if filter_enabled %}
        START_FILTER SPEED={material.filter_speed / 100}
    {% endif %}

    {% if filter_enabled %}
        START_FILTER SPEED={material.filter_speed / 100}
    {% endif %}

    # And.... Goooo!
    {% if status_leds_enabled %}
        STATUS_PRINTING
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Start printing!"
    {% endif %}

    G92 E0.0


[gcode_macro _MODULE_HEATSOAK_BED]
gcode:
    # ----- BED HEATSOAK -------------------------------------
    # Heatsoak the bed if SOAK time is set and bed is not already warming up to the correct temperature (+-8Â°C).
    # We make the assumption that the soak is not needed if the bed is already at the correct target.
    # We also use the recirculating filter under the bed (if available) at full power to spread the heat
    # during the heatsoak if a specific temperature need to be reached.
    {% set BED_TEMP = printer["gcode_macro START_PRINT"].bed_temp %}
    {% set SOAK = printer["gcode_macro START_PRINT"].soak %}
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}

    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if status_leds_enabled %}
        STATUS_HEATING
    {% endif %}
        # If we need a full soak (not 0 min), then move the toolhead to the center front to spread the heat using the hotend fan
    {% if printer.heater_bed.temperature < (BED_TEMP - 8) %}

      {% if (CHAMBER_TEMP > 0) and filter_enabled %}
            START_FILTER SPEED=1
      {% endif %}
    
      {% if SOAK > 0 %}
          G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
      {% endif %}
    
        # Put the bed temperature target and wait for the soak
      HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME={SOAK}
    {% else %}
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME=0
    {% endif %}


[gcode_macro _MODULE_HEATSOAK_CHAMBER]
gcode:
    # ----- CHAMBER HEATSOAK ----------------------------------
    # If a setpoint is defined and a sensor available, then we wait to reach the chamber temperature (with a timeout in case it's winter...)
    # If there is one, the recirculating filter is also be powered on from the previous step and kept like that to act as bed fans
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}
    {% set CHAMBER_MAXTIME = printer["gcode_macro START_PRINT"].chamber_maxtime %}

    {% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if chamber_sensor_enabled %}
        {% if CHAMBER_TEMP > 0 %}
            {% set chamber_sensor_name = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_name %}
            {% set CURRENT_TEMP = printer["temperature_sensor " ~ chamber_sensor_name].temperature|float %}

            # We do a first test to validate that the chamber is not already at temperature before starting the soak
            {% if CURRENT_TEMP <= CHAMBER_TEMP %}
                G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
                M106 S255
                {% if filter_enabled %}
                    START_FILTER SPEED=1
                {% endif %}
                # Wait for the temperature of the chamber to be reached (default max: 15min)
                HEATSOAK_CHAMBER TEMP={CHAMBER_TEMP} MAXTIME={CHAMBER_MAXTIME}

                {% if filter_enabled %}
                    STOP_FILTER
                {% endif %}
                M106 S0
                
            {% endif %}
          {% endif %} 
      G28 Z
    {% endif %}


[gcode_macro _MODULE_EXTRUDER_PREHEATING]
gcode:
    # Preheat the nozzle.
    {% set safe_extruder_temp = printer["gcode_macro _USER_VARIABLES"].safe_extruder_temp|float %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% if status_leds_enabled %}
        STATUS_HEATING
    {% endif %}
    {% if verbose %}
        RESPOND MSG="Pre-heating the nozzle to a safe temperature..."
    {% endif %}
    
    {% if printer.extruder.target < safe_extruder_temp %}
        M104 S{safe_extruder_temp} 
        {% if verbose %}
            RESPOND MSG="Extruder is heating at temperature of {safe_extruder_temp} degrees"
        {% endif %}
        {% else %}
            {% if verbose %}
                RESPOND MSG="Extruder is already hot"
            {% endif %}
    {% endif %}


[gcode_macro _MODULE_EXTRUDER_HEATING]
gcode:
    # Heat the nozzle to print temperature ontop of the purge bucket (if available) or in the middle of the bed
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}

    {% if status_leds_enabled %}
        STATUS_HEATING
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Extruder heating to print temperature..."
    {% endif %}

    M109 S{EXTRUDER_TEMP}

    {% if verbose %}
        RESPOND MSG="Extruder temperature OK"
    {% endif %}




[gcode_macro _MODULE_BED_MESH]
gcode:
    # ----- BED MESH -------------------------------------------
    {% set BED_MESH_PROFILE = printer["gcode_macro START_PRINT"].bed_mesh_profile %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}

    {% if bed_mesh_enabled %}
      {% if status_leds_enabled %}
        STATUS_MESHING
      {% endif %}
      {% if verbose %}
        RESPOND MSG="Bed mesh measurement..."
      {% endif %}
        BED_MESH_CLEAR
        BED_MESH_CALIBRATE ADAPTIVE=1 PROFILE=default
    {% endif %}
      
         

[gcode_macro _MODULE_LOAD_SCEW_PROFILE]
gcode:
  {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
  {% set scew_profile_enabled = printer["gcode_macro _USER_VARIABLES"].scew_profile_enabled %}

  {% if scew_profile_enabled %}
      SKEW_PROFILE LOAD=my_skew_profile
        {% if verbose %}
            RESPOND MSG="Scew profile loaded"
        {% endif %}
  {% else %}
    {% if verbose %}
            RESPOND MSG="Scew profile not set. Skip"
    {% endif %}
  {% endif %}

 

[gcode_macro _MODULE_TOOLHEAD_PARKING]
gcode:
    {% set smart_parking_enabled = printer["gcode_macro _USER_VARIABLES"].smart_parking_enabled %}

    {% if smart_parking_enabled %}
      {% if verbose %}
        RESPOND MSG="Parking..."
      {% endif %}
      {% if status_leds_enabled %}
          STATUS_HOMING
      {% endif %}
      Smart_Park
    {% endif %}

[gcode_macro _MODULE_PURGING]
gcode:
    {% set purging_enabled = printer["gcode_macro _USER_VARIABLES"].purging_enabled %}
    {% if purging_enabled %}
        {% if verbose %}
            RESPOND MSG="Purging..."
        {% endif %}
      SAVE_PRESSURE_ADVANCE
      SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE=0
      {% if status_leds_enabled %}
          STATUS_CLEANING
      {% endif %}
      VORON_PURGE 
      RESTORE_PRESSURE_ADVANCE
    {% else %}
        {% if verbose %}
            RESPOND MSG="Purging disable. Skip."
        {% endif %}
    {% endif %}


[gcode_macro _MODULE_CUSTOM3]
gcode:
    # ---- CUSTOM Macro section
    # this section is reserved for personal customized start actions, which can be combined with all other start actions
    # in order to use this, create a new macro in overrides.cfg
    # [gcode_macro _MODULE_CUSTOM3]
    # gcode:
    #   ## Your custom code here